#version 460

layout(vertices = 3) out;

in vec3 vs_position[];
in vec2 vs_texcoord[];
in vec3 vs_normal[];
in vec3 vs_tangent[];

out vec3 tc_position[];
out vec2 tc_texcoord[];
out vec3 tc_normal[];
out vec3 tc_tangent[];

uniform mat4 ModelMatrix;
uniform vec3 camPos;

uniform sampler2D dispTex;


float tessDist(float dist0, float dist1)
{
    float avgDist = (dist0 + dist1) * .5f;

    float scaled = .1f + (10.f / avgDist);

    return max(min(scaled, 3.f), 1.f);
}


void main()
{
    tc_position[gl_InvocationID] = vs_position[gl_InvocationID];
    tc_texcoord[gl_InvocationID] = vs_texcoord[gl_InvocationID];
    tc_normal[gl_InvocationID]   = vs_normal[gl_InvocationID];
    tc_tangent[gl_InvocationID]  = vs_tangent[gl_InvocationID];

    // cull patches facing away from the camera
    vec3 viewDir = camPos - (mat3(ModelMatrix) * (tc_position[0] + tc_position[1] + tc_position[2])/3.f);
    vec3 normal = normalize(tc_normal[0] + tc_normal[1] + tc_normal[2]);
    vec3 faceNormal = mat3(ModelMatrix) * normal;
    float normDiff = dot(viewDir, faceNormal);
    if (normDiff < -5.f)
    {
        gl_TessLevelOuter[0] = 0.f;
        gl_TessLevelOuter[1] = 0.f;
        gl_TessLevelOuter[2] = 0.f;

        gl_TessLevelInner[0] = 0.f;
        return;
    }

    // disable tessellation near poles
    const vec3 poleDir = normalize(vec3(0.f, .3f, .13f));
    float poleNorm01 = abs(dot(poleDir, (tc_normal[0] + tc_normal[1]) * .5)) * 1.5f - .5f;
    float poleNorm02 = abs(dot(poleDir, (tc_normal[0] + tc_normal[2]) * .5)) * 1.5f - .5f;
    float poleNorm12 = abs(dot(poleDir, (tc_normal[1] + tc_normal[2]) * .5)) * 1.5f - .5f;

    // variation in displacement map
    mat3 disp_sample = mat3(0.f);

    float corner0 = texture2D(dispTex, tc_texcoord[0]).r;
    float corner1 = texture2D(dispTex, tc_texcoord[1]).r;
    float corner2 = texture2D(dispTex, tc_texcoord[2]).r;

    vec2 edge01p = (tc_texcoord[0] + tc_texcoord[1]) * .5f;
    vec2 edge02p = (tc_texcoord[0] + tc_texcoord[2]) * .5f;
    vec2 edge12p = (tc_texcoord[1] + tc_texcoord[2]) * .5f;
    float edge01 = texture2D(dispTex, edge01p).r;
    float edge02 = texture2D(dispTex, edge02p).r;
    float edge12 = texture2D(dispTex, edge12p).r;

    float dist0 = distance(camPos, mat3(ModelMatrix) * vs_position[0]);
    float dist1 = distance(camPos, mat3(ModelMatrix) * vs_position[1]);
    float dist2 = distance(camPos, mat3(ModelMatrix) * vs_position[2]);

    vec3 edge_disp = vec3(0.f);

    edge_disp.x =  distance(corner1, corner2);
    edge_disp.x += distance(corner1, edge12);
    edge_disp.x += distance(corner2, edge12);
    edge_disp.x *= tessDist(dist1, dist2) * (1.f - poleNorm12);

    edge_disp.y =  distance(corner0, corner2);
    edge_disp.y += distance(corner0, edge02);
    edge_disp.y += distance(corner2, edge02);
    edge_disp.y *= tessDist(dist0, dist2) * (1.f - poleNorm02);

    edge_disp.z =  distance(corner0, corner1);
    edge_disp.z += distance(corner0, edge01);
    edge_disp.z += distance(corner1, edge01);
    edge_disp.z *= tessDist(dist0, dist1) * (1.f - poleNorm01);

    edge_disp = max(min(edge_disp * 8.f, 8.f), 1.f);

    gl_TessLevelOuter[0] = edge_disp.x;
    gl_TessLevelOuter[1] = edge_disp.y;
    gl_TessLevelOuter[2] = edge_disp.z;

    
    float center01 = texture2D(dispTex, mix(tc_texcoord[0], edge12p, .7f)).r;
    float center02 = texture2D(dispTex, mix(tc_texcoord[1], edge02p, .7f)).r;
    float center12 = texture2D(dispTex, mix(tc_texcoord[2], edge01p, .7f)).r;

    gl_TessLevelInner[0] = max(max(edge_disp.x, edge_disp.y), edge_disp.z);
    //gl_TessLevelInner[0] = (edge_disp.x + edge_disp.y + edge_disp.z) / 3.f;
}
