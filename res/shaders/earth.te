#version 460

layout (triangles, fractional_odd_spacing, ccw) in;

in vec3 tc_position[];
in vec2 tc_texcoord[];
in vec3 tc_normal[];
in vec3 tc_tangent[];

out vec3 te_position;
out vec2 te_texcoord;
out mat3 te_tangentSpace;
out vec4 te_fragPosLightSpace;

uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;
uniform mat4 lightSpaceMatrix;

uniform sampler2D dispTex;


vec2 interpolate2D(in vec2 v0, in vec2 v1, in vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(in vec3 v0, in vec3 v1, in vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}


void main()
{
    te_texcoord = interpolate2D(tc_texcoord[0], tc_texcoord[1], tc_texcoord[2]);
    
    vec3 position = interpolate3D(tc_position[0], tc_position[1], tc_position[2]);

    vec3 normal = normalize(interpolate3D(tc_normal[0], tc_normal[1], tc_normal[2]));

    const float seaLevel = 10.f;
    const float heightScale = .1f;
    const vec3 center = vec3(0.f);
    float seaOffset = seaLevel - distance(center, position);
    float height = texture(dispTex, te_texcoord).r * heightScale;
    position += normal * (seaOffset + height);
    te_position = mat3(ModelMatrix) * position;

    vec3 Tangent = normalize(tc_tangent[0] - dot(tc_tangent[0], normal) * normal);
    vec3 Bitangent = cross(Tangent, normal);
    normal = mat3(ModelMatrix) * normal;
    Tangent = mat3(ModelMatrix) * Tangent;
    Bitangent = mat3(ModelMatrix) * Bitangent;
    te_tangentSpace = mat3(Tangent, Bitangent, normal);

    te_fragPosLightSpace = lightSpaceMatrix * vec4(te_position, 1.f);

    gl_Position = ProjectionMatrix * ViewMatrix * ModelMatrix * vec4(position, 1.f);
}
